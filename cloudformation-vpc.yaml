AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AWSAccountId: 
    Description: The AWS Account Id 
    Type: String
  VPCCidrBlock:
    Type: String
    Description: CidrBlock for the VPC of the region, (e.g.) 10.101.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  RegionSubnet:
    Type: String
    Description: The first two octets of the VPC CidrBlock (e.g.) 10.101
    AllowedPattern: '(\d{1,3})\.(\d{1,3})'
  NumAvailabilityZones:
    Type: Number
    Description: The number of availability zones in the region

Conditions:
  Has2AvailabilityZones:
    !Or
      - !Equals [ 2, !Ref NumAvailabilityZones ]
      - !Equals [ 3, !Ref NumAvailabilityZones ]
      - !Equals [ 4, !Ref NumAvailabilityZones ]
      - !Equals [ 5, !Ref NumAvailabilityZones ]
      - !Equals [ 6, !Ref NumAvailabilityZones ]
      - !Equals [ 7, !Ref NumAvailabilityZones ]
  Has3AvailabilityZones:
    !Or
      - !Equals [ 3, !Ref NumAvailabilityZones ]
      - !Equals [ 4, !Ref NumAvailabilityZones ]
      - !Equals [ 5, !Ref NumAvailabilityZones ]
      - !Equals [ 6, !Ref NumAvailabilityZones ]
      - !Equals [ 7, !Ref NumAvailabilityZones ]
  Has4AvailabilityZones:
    !Or
      - !Equals [ 4, !Ref NumAvailabilityZones ]
      - !Equals [ 5, !Ref NumAvailabilityZones ]
      - !Equals [ 6, !Ref NumAvailabilityZones ]
      - !Equals [ 7, !Ref NumAvailabilityZones ]
  Has5AvailabilityZones:
    !Or
      - !Equals [ 5, !Ref NumAvailabilityZones ]
      - !Equals [ 6, !Ref NumAvailabilityZones ]
      - !Equals [ 7, !Ref NumAvailabilityZones ]
  Has6AvailabilityZones:
    !Or
      - !Equals [ 6, !Ref NumAvailabilityZones ]
      - !Equals [ 7, !Ref NumAvailabilityZones ]
      
Resources:
  # Define VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      Tags:
        - Key: Name
          Value: aws-ping-vpc-main

  # Resources for SSM
  # https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-cf.html#automation-cf-create
  RoleSSM:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
      Path: "/"
  InstanceProfileSSM:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref RoleSSM
  
  # Define Subnet
  SubnetInAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      # e.g. 10.101.1.0/24, where up to the second octet is replaced by mapping
      CidrBlock: !Sub "${RegionSubnet}.1.0/24"
      AvailabilityZone: 
        Fn::Select:
          - 0
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-az-1
  SubnetInAZ2:
    Type: AWS::EC2::Subnet
    Condition: Has2AvailabilityZones
    Properties:
      # e.g. 10.101.2.0/24, where up to the second octet is replaced by mapping
      CidrBlock: !Sub "${RegionSubnet}.2.0/24"
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-az-2
  SubnetInAZ3:
    Type: AWS::EC2::Subnet
    Condition: Has3AvailabilityZones
    Properties:
      # e.g. 10.101.3.0/24, where up to the second octet is replaced by mapping
      CidrBlock: !Sub "${RegionSubnet}.3.0/24"
      AvailabilityZone: 
        Fn::Select: 
          - 2
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-az-3
  SubnetInAZ4:
    Type: AWS::EC2::Subnet
    Condition: Has4AvailabilityZones
    Properties:
      # e.g. 10.101.4.0/24, where up to the second octet is replaced by mapping
      CidrBlock: !Sub "${RegionSubnet}.4.0/24"
      AvailabilityZone: 
        Fn::Select: 
          - 3
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-az-4
  SubnetInAZ5:
    Type: AWS::EC2::Subnet
    Condition: Has5AvailabilityZones
    Properties:
      # e.g. 10.101.5.0/24, where up to the second octet is replaced by mapping
      CidrBlock: !Sub "${RegionSubnet}.5.0/24"
      AvailabilityZone: 
        Fn::Select: 
          - 4
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-az-5
  SubnetInAZ6:
    Type: AWS::EC2::Subnet
    Condition: Has6AvailabilityZones
    Properties:
      # e.g. 10.101.6.0/24, where up to the second octet is replaced by mapping
      CidrBlock: !Sub "${RegionSubnet}.6.0/24"
      AvailabilityZone: 
        Fn::Select: 
          - 5
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-az-6

  # Define Internet Gateway and the attachment to VPC          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: aws-ping-igateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Define Route Table, its Route, and associate the Route Table with the Subnet
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: aws-ping-route-table
  RouteInternetGateway:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable      

  SubnetInAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInAZ1
  SubnetInAz2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Has2AvailabilityZones
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInAZ2
  SubnetInAz3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Has3AvailabilityZones
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInAZ3
  SubnetInAz4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Has4AvailabilityZones
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInAZ4
  SubnetInAz5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Has5AvailabilityZones
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInAZ5
  SubnetInAz6RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Has6AvailabilityZones
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInAZ6

  # Define Security Group and its inbound rules (= ingress).
  # The outbound (egress) rules are automatically set as "Allow All".
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: aws-ping-security-group
      GroupDescription: security group allowing SSH and ICMP
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-security-group
  SecurityGropuIngressInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup
  SecurityGropuIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref SSHLocation
  SecurityGropuIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: !Ref SSHLocation

Outputs:
  VPCId:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"
  RouteTable:
    Value: !Ref RouteTable
    Export:
      Name: !Sub "${AWS::StackName}-RouteTable"
  SecurityGroup:
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroup"
  InstanceProfile:
    Description: Instance profile for EC2 to use AWS CLI and EC2 SSM
    Value: !Ref InstanceProfileSSM
    Export:
      Name: !Sub "${AWS::StackName}-InstanceProfile"