AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  EC2InstanceType: 
    Description: Instance type for iperf server and client
    Type: String
  AWSAccountIdForMainVPC: 
    Description: The AWS Account Id for the 
    Type: String
  PeerVpcId: 
    Description: Only needed for sub CloudFormation stacks. The VPC Id of the main stack. The main CloudFormation stack can leave this empty
    Type: String
    Default: "" # The main CloudFormation stack can leave this empty
  PeerRoleArn:
    Description: Only needed for sub CloudFormation stacks. The ARN of VPC Peering role. The main CloudFormation stack can leave this empty
    Type: String
    Default: "" # The main CloudFormation stack can leave this empty
  PeerRegion:
    Description: Only needed for sub CloudFormation stacks. The region of the main stack. The main CloudFormation stack can leave this empty
    Type: String 
    Default: "" # The main CloudFormation stack can leave this empty
  MainRegion:
    Description: Your default region
    Type: String 
    Default: "ap-northeast-1"

# run region-map.sh and copy and paste the output here:
Mappings:
  RegionMap:
    eu-north-1:
      NumberOfAvailabilityZones: 3
      RegionSubnet: 10.101
      AmazonLinux2AMI: ami-1fb13961
    ap-south-1:
      NumberOfAvailabilityZones: 3
      RegionSubnet: 10.102
      AmazonLinux2AMI: ami-00e782930f1c3dbc7
    eu-west-3:
      NumberOfAvailabilityZones: 3
      RegionSubnet: 10.103
      AmazonLinux2AMI: ami-0ebb3a801d5fb8b9b
    eu-west-2:
      NumberOfAvailabilityZones: 3
      RegionSubnet: 10.104
      AmazonLinux2AMI: ami-0009a33f033d8b7b6
    eu-west-1:
      NumberOfAvailabilityZones: 3
      RegionSubnet: 10.105
      AmazonLinux2AMI: ami-030dbca661d402413
    ap-northeast-2:
      NumberOfAvailabilityZones: 3
      RegionSubnet: 10.106
      AmazonLinux2AMI: ami-08ab3f7e72215fe91
    ap-northeast-1:
      NumberOfAvailabilityZones: 3
      RegionSubnet: 10.107
      AmazonLinux2AMI: ami-00d101850e971728d
    sa-east-1:
      NumberOfAvailabilityZones: 2
      RegionSubnet: 10.108
      AmazonLinux2AMI: ami-058141e091292ecf0
    ca-central-1:
      NumberOfAvailabilityZones: 2
      RegionSubnet: 10.109
      AmazonLinux2AMI: ami-08a9b721ecc5b0a53
    ap-southeast-1:
      NumberOfAvailabilityZones: 3
      RegionSubnet: 10.110
      AmazonLinux2AMI: ami-0b5a47f8865280111
    ap-southeast-2:
      NumberOfAvailabilityZones: 3
      RegionSubnet: 10.111
      AmazonLinux2AMI: ami-0fb7513bcdc525c3b
    eu-central-1:
      NumberOfAvailabilityZones: 3
      RegionSubnet: 10.112
      AmazonLinux2AMI: ami-0ebe657bc328d4e82
    us-east-1:
      NumberOfAvailabilityZones: 6
      RegionSubnet: 10.113
      AmazonLinux2AMI: ami-0c6b1d09930fac512
    us-east-2:
      NumberOfAvailabilityZones: 3
      RegionSubnet: 10.114
      AmazonLinux2AMI: ami-0ebbf2179e615c338
    us-west-1:
      NumberOfAvailabilityZones: 2
      RegionSubnet: 10.115
      AmazonLinux2AMI: ami-015954d5e5548d13b
    us-west-2:
      NumberOfAvailabilityZones: 4
      RegionSubnet: 10.116
      AmazonLinux2AMI: ami-0cb72367e98845d43

Conditions:
  Has2AvailabilityZones:
    !Or
      - !Equals [ 2, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 3, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 4, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 5, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 6, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 7, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
  Has3AvailabilityZones:
    !Or
      - !Equals [ 3, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 4, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 5, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 6, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 7, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
  Has4AvailabilityZones:
    !Or
      - !Equals [ 4, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 5, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 6, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 7, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
  Has5AvailabilityZones:
    !Or
      - !Equals [ 5, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 6, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 7, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
  Has6AvailabilityZones:
    !Or
      - !Equals [ 6, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 7, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
  IsMainVPC:
    !Equals [ !Ref "AWS::Region", !Ref MainRegion ]
  IsSubVPC:
    !Not [ !Equals [ !Ref "AWS::Region", !Ref MainRegion ] ] 

Resources:
  # Define VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      # e.g. 10.101.0.0/16, where up to the second octet is replaced by mapping
      CidrBlock: 
        !Sub
          - "${RegionSubnet}.0.0/16"
          - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
      Tags:
        - Key: Name
          Value: aws-ping-vpc-main

  # Needed for VPC peering
  PeerRole:
    Type: 'AWS::IAM::Role'
    Condition: IsMainVPC
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Principal:
              AWS: !Ref AWSAccountIdForMainVPC
            Action:
              - 'sts:AssumeRole'
            Effect: Allow
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'ec2:AcceptVpcPeeringConnection'
                Resource: '*'
  VPCPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Condition: IsSubVPC
    Properties:
      VpcId: !Ref VPC
      PeerRegion: !Ref PeerRegion
      PeerVpcId: !Ref PeerVpcId
      PeerOwnerId: !Ref AWSAccountIdForMainVPC
      PeerRoleArn: !Ref PeerRoleArn

  # Resources for SSM
  # https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-cf.html#automation-cf-create
  RoleSSM:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
      Path: "/"
  InstanceProfileSSM:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref RoleSSM
  
  # Define Subnet
  SubnetInAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      # e.g. 10.101.0.0/24, where up to the second octet is replaced by mapping
      CidrBlock: 
        !Sub
          - "${RegionSubnet}.0.0/24"
          - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
      AvailabilityZone: 
        Fn::Select:
          - 0
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-az-1
  SubnetExtraInAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      # e.g. 10.101.1.0/24, where up to the second octet is replaced by mapping
      CidrBlock: 
        !Sub
          - "${RegionSubnet}.1.0/24"
          - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-extra-az-1
  SubnetInAZ2:
    Type: AWS::EC2::Subnet
    Condition: Has2AvailabilityZones
    Properties:
      # e.g. 10.101.2.0/24, where up to the second octet is replaced by mapping
      CidrBlock: 
        !Sub
          - "${RegionSubnet}.2.0/24"
          - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-az-2
  SubnetInAZ3:
    Type: AWS::EC2::Subnet
    Condition: Has3AvailabilityZones
    Properties:
      # e.g. 10.101.3.0/24, where up to the second octet is replaced by mapping
      CidrBlock: 
        !Sub
          - "${RegionSubnet}.3.0/24"
          - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
      AvailabilityZone: 
        Fn::Select: 
          - 2
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-az-3
  SubnetInAZ4:
    Type: AWS::EC2::Subnet
    Condition: Has4AvailabilityZones
    Properties:
      # e.g. 10.101.4.0/24, where up to the second octet is replaced by mapping
      CidrBlock: 
        !Sub
          - "${RegionSubnet}.4.0/24"
          - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
      AvailabilityZone: 
        Fn::Select: 
          - 3
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-az-4
  SubnetInAZ5:
    Type: AWS::EC2::Subnet
    Condition: Has5AvailabilityZones
    Properties:
      # e.g. 10.101.5.0/24, where up to the second octet is replaced by mapping
      CidrBlock: 
        !Sub
          - "${RegionSubnet}.5.0/24"
          - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
      AvailabilityZone: 
        Fn::Select: 
          - 3
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-az-5
  SubnetInAZ6:
    Type: AWS::EC2::Subnet
    Condition: Has6AvailabilityZones
    Properties:
      # e.g. 10.101.6.0/24, where up to the second octet is replaced by mapping
      CidrBlock: 
        !Sub
          - "${RegionSubnet}.6.0/24"
          - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
      AvailabilityZone: 
        Fn::Select: 
          - 3
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-az-6

  # Define Internet Gateway and the attachment to VPC          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: aws-ping-igateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  # Define Route Table, its Route, and associate the Route Table with the Subnet
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: aws-ping-route-table
  RouteInternetGateway:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable      
  RouteVPCPeering:
    Type: AWS::EC2::Route
    Condition: IsSubVPC
    Properties: 
      DestinationCidrBlock:
        !Sub
          - "${RegionSubnet}.0.0/16"
          - { RegionSubnet: !FindInMap [RegionMap, Ref: MainRegion, RegionSubnet] }            
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
      RouteTableId: !Ref RouteTable      
  SubnetInAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInAZ1
  SubnetExtraInAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetExtraInAZ1
  SubnetInAz2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Has2AvailabilityZones
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInAZ2
  SubnetInAz3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Has3AvailabilityZones
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInAZ3
  SubnetInAz4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Has4AvailabilityZones
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInAZ4
  SubnetInAz5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Has5AvailabilityZones
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInAZ5
  SubnetInAz6RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Has6AvailabilityZones
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInAZ6


  # Define Security Group and its inbound rules (= ingress).
  # The outbound (egress) rules are automatically set as "Allow All".
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: aws-ping-security-group
      GroupDescription: security group allowing SSH and ICMP
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-security-group
  SecurityGropuIngressInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup
  SecurityGropuIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref SSHLocation
  SecurityGropuIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: !Ref SSHLocation
  # Accept ICMP requests from ALL regions' VPC Peering - this is too wide open, but for experimental purpose, that's probably OK.
  # Do this at your own risk!!
  SecurityGropuIngressVPCPeeringICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 10.0.0.0/8

  # EC2 instances
  EC2InstancePingOrigin:
    Type: AWS::EC2::Instance
    Condition: IsMainVPC
    Properties: 
      ImageId: !FindInMap [RegionMap, Ref: "AWS::Region", AmazonLinux2AMI]
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      IamInstanceProfile: !Ref InstanceProfileSSM
      # https://aws.amazon.com/premiumsupport/knowledge-center/network-throughput-benchmark-linux-ec2/
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-ping
            yum -y install jq
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetInAZ1
          PrivateIpAddresses:
            # e.g. 10.101.0.6, where up to the second octet is replaced by mapping
            - PrivateIpAddress: 
                !Sub
                  - "${RegionSubnet}.0.6"
                  - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-subnet-az-1-origin
  EC2InstanceSubnetInAZ1:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap [RegionMap, Ref: "AWS::Region", AmazonLinux2AMI]
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetInAZ1
          PrivateIpAddresses:
            # e.g. 10.101.0.5, where up to the second octet is replaced by mapping
            - PrivateIpAddress: 
                !Sub
                  - "${RegionSubnet}.0.4"
                  - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-subnet-az-1
  EC2InstanceSubnetExtraInAZ1:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap [RegionMap, Ref: "AWS::Region", AmazonLinux2AMI]
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetExtraInAZ1
          PrivateIpAddresses:
            # e.g. 10.101.0.5, where up to the second octet is replaced by mapping
            - PrivateIpAddress: 
                !Sub
                  - "${RegionSubnet}.1.5"
                  - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-subnet-extra-az-1
  EC2InstanceSubnetInAz2:
    Type: AWS::EC2::Instance
    Condition: Has2AvailabilityZones
    Properties: 
      ImageId: !FindInMap [RegionMap, Ref: "AWS::Region", AmazonLinux2AMI]
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetInAZ2
          PrivateIpAddresses:
            # e.g. 10.101.0.5, where up to the second octet is replaced by mapping
            - PrivateIpAddress: 
                !Sub
                  - "${RegionSubnet}.2.5"
                  - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-subnet-az-2
  EC2InstanceSubnetInAz3:
    Type: AWS::EC2::Instance
    Condition: Has3AvailabilityZones
    Properties: 
      ImageId: !FindInMap [RegionMap, Ref: "AWS::Region", AmazonLinux2AMI]
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetInAZ3
          PrivateIpAddresses:
          PrivateIpAddresses:
            # e.g. 10.101.0.5, where up to the second octet is replaced by mapping
            - PrivateIpAddress: 
                !Sub
                  - "${RegionSubnet}.3.5"
                  - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-subnet-az-3
  EC2InstanceSubnetInAz4:
    Type: AWS::EC2::Instance
    Condition: Has4AvailabilityZones
    Properties: 
      ImageId: !FindInMap [RegionMap, Ref: "AWS::Region", AmazonLinux2AMI]
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetInAZ4
          PrivateIpAddresses:
            # e.g. 10.101.0.5, where up to the second octet is replaced by mapping
            - PrivateIpAddress: 
                !Sub
                  - "${RegionSubnet}.4.5"
                  - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-subnet-az-4
  EC2InstanceSubnetInAz5:
    Type: AWS::EC2::Instance
    Condition: Has5AvailabilityZones
    Properties: 
      ImageId: !FindInMap [RegionMap, Ref: "AWS::Region", AmazonLinux2AMI]
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetInAZ5
          PrivateIpAddresses:
            # e.g. 10.101.0.5, where up to the second octet is replaced by mapping
            - PrivateIpAddress: 
                !Sub
                  - "${RegionSubnet}.5.5"
                  - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-subnet-az-5
  EC2InstanceSubnetInAz6:
    Type: AWS::EC2::Instance
    Condition: Has6AvailabilityZones
    Properties: 
      ImageId: !FindInMap [RegionMap, Ref: "AWS::Region", AmazonLinux2AMI]
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetInAZ6
          PrivateIpAddresses:
            # e.g. 10.101.0.5, where up to the second octet is replaced by mapping
            - PrivateIpAddress: 
                !Sub
                  - "${RegionSubnet}.6.5"
                  - { RegionSubnet: !FindInMap [RegionMap, Ref: "AWS::Region", RegionSubnet] }            
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-subnet-az-6
    
Outputs:
  VPCId:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"
  PeerRoleArn:
    Condition: IsMainVPC
    Value: !GetAtt 
      - PeerRole
      - Arn
    Export:
      Name: !Sub "${AWS::StackName}-PeerRoleArn"      
  VPCPeeringConnection:
    Condition: IsSubVPC
    Value: !Ref VPCPeeringConnection
    Export:
      Name: !Sub "${AWS::StackName}-VPCPeeringConnection"      
  VPCCidrBlock:
    Value: !GetAtt 
      - VPC
      - CidrBlock
    Export:
      Name: !Sub "${AWS::StackName}-VPCCidrBlock"      
  RouteTable:
    Value: !Ref RouteTable
    Export:
      Name: !Sub "${AWS::StackName}-RouteTable"
