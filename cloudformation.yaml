AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  EC2InstanceType: 
    Description: Instance type for iperf server and client
    Type: String
    Default: m5.xlarge

Resources:
  # Define VPC and Subnet
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: aws-ping-vpc-main
  SubnetApNortheast1a:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-ap-northeast-1a
  SubnetApNortheast1aExtra:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-ap-northeast-1a-extra
  SubnetApNortheast1c:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-northeast-1c
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-ap-northeast-1c
  SubnetApNortheast1d:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ap-northeast-1d
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-ap-northeast-1d


  # Define Internet Gateway and the attachment to VPC          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: aws-ping-igateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  # Define Route Table, its Route, and associate the Route Table with the Subnet
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: aws-ping-route-table
  RouteInternetGateway:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable      
  SubnetRouteTableAssociationApNortheast1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetApNortheast1a
  SubnetRouteTableAssociationApNortheast1aExtra:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetApNortheast1aExtra
  SubnetRouteTableAssociationApNortheast1c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetApNortheast1c
  SubnetRouteTableAssociationApNortheast1d:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetApNortheast1d

  # Define Security Group and its inbound rules (= ingress).
  # The outbound (egress) rules are automatically set as "Allow All".
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: aws-ping-security-group
      GroupDescription: security group allowing SSH and ICMP
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-security-group
  SecurityGropuIngressInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup
  SecurityGropuIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref SSHLocation
  SecurityGropuIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: icmp
      FromPort: 8
      ToPort: 8
      CidrIp: !Ref SSHLocation

  # EC2 instances
  EC2InstanceApNortheast1a1:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0d7ed3ddb85b521a6"
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      # https://aws.amazon.com/premiumsupport/knowledge-center/network-throughput-benchmark-linux-ec2/
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-ping
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetApNortheast1a
          PrivateIpAddresses:
            - PrivateIpAddress: "10.0.0.5"
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-ap-northeast-1a-1
  EC2InstanceApNortheast1a2:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0d7ed3ddb85b521a6"
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      # https://aws.amazon.com/premiumsupport/knowledge-center/network-throughput-benchmark-linux-ec2/
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-ping
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetApNortheast1a
          PrivateIpAddresses:
            - PrivateIpAddress: "10.0.0.6"
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-ap-northeast-1a-2
  EC2InstanceApNortheast1aExtra1:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0d7ed3ddb85b521a6"
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      # https://aws.amazon.com/premiumsupport/knowledge-center/network-throughput-benchmark-linux-ec2/
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-ping
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetApNortheast1aExtra
          PrivateIpAddresses:
            - PrivateIpAddress: "10.0.5.5"
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-ap-northeast-1a-extra-1
  EC2InstanceApNortheast1c1:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0d7ed3ddb85b521a6"
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      # https://aws.amazon.com/premiumsupport/knowledge-center/network-throughput-benchmark-linux-ec2/
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-ping
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetApNortheast1c
          PrivateIpAddresses:
            - PrivateIpAddress: "10.0.1.5"
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-ap-northeast-1c-1
  EC2InstanceApNortheast1d1:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0d7ed3ddb85b521a6"
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      # https://aws.amazon.com/premiumsupport/knowledge-center/network-throughput-benchmark-linux-ec2/
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-ping
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetApNortheast1d
          PrivateIpAddresses:
            - PrivateIpAddress: "10.0.2.5"
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-ap-northeast-1d-1        
