AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  EC2InstanceType: 
    Description: Instance type for iperf server and client
    Type: String
    Default: m5.xlarge  

Mappings:
  RegionMap:
    ap-northeast-1:
      NumberOfAvailabilityZones: 3 

Conditions:
  Has2AvailabilityZones:
    !Or
      - !Equals [ 2, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 3, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 4, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 5, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
  Has3AvailabilityZones:
    !Or
      - !Equals [ 3, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 4, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 5, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
  Has4AvailabilityZones:
    !Or
      - !Equals [ 4, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]
      - !Equals [ 5, !FindInMap [RegionMap, Ref: "AWS::Region", NumberOfAvailabilityZones] ]

Resources:
  # Define VPC and Subnet
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: aws-ping-vpc-main
  SubnetFirst:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: 
        Fn::Select:
          - 0
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-1
  SubnetFirstExtra:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-1-extra
  SubnetSecond:
    Type: AWS::EC2::Subnet
    Condition: Has2AvailabilityZones
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-2
  SubnetThird:
    Type: AWS::EC2::Subnet
    Condition: Has3AvailabilityZones
    Properties:
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: 
        Fn::Select: 
          - 2
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-3
  SubnetFourth:
    Type: AWS::EC2::Subnet
    Condition: Has4AvailabilityZones
    Properties:
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: 
        Fn::Select: 
          - 3
          - !GetAZs {Ref: "AWS::Region"}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-subnet-4

  # Define Internet Gateway and the attachment to VPC          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: aws-ping-igateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  # Define Route Table, its Route, and associate the Route Table with the Subnet
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: aws-ping-route-table
  RouteInternetGateway:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable      
  SubnetFirstRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetFirst
  SubnetFirstExtraRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetFirstExtra
  SubnetSecondRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Has2AvailabilityZones
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetSecond
  SubnetThirdRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Has3AvailabilityZones
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetThird
  SubnetFourthRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Has4AvailabilityZones
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetFourth

  # Define Security Group and its inbound rules (= ingress).
  # The outbound (egress) rules are automatically set as "Allow All".
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: aws-ping-security-group
      GroupDescription: security group allowing SSH and ICMP
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ping-security-group
  SecurityGropuIngressInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup
  SecurityGropuIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref SSHLocation
  SecurityGropuIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: icmp
      FromPort: 8
      ToPort: 8
      CidrIp: !Ref SSHLocation

  # EC2 instances
  EC2InstanceSubnetFirst:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0d7ed3ddb85b521a6"
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      # https://aws.amazon.com/premiumsupport/knowledge-center/network-throughput-benchmark-linux-ec2/
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-ping
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetFirst
          PrivateIpAddresses:
            - PrivateIpAddress: "10.0.0.5"
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-subnet-1
  EC2InstanceSubnetFirstExtra:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0d7ed3ddb85b521a6"
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      # https://aws.amazon.com/premiumsupport/knowledge-center/network-throughput-benchmark-linux-ec2/
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-ping
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetFirstExtra
          PrivateIpAddresses:
            - PrivateIpAddress: "10.0.1.5"
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-subnet-1-extra
  EC2InstanceSubnetSecond:
    Type: AWS::EC2::Instance
    Condition: Has2AvailabilityZones
    Properties: 
      ImageId: "ami-0d7ed3ddb85b521a6"
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      # https://aws.amazon.com/premiumsupport/knowledge-center/network-throughput-benchmark-linux-ec2/
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-ping
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetSecond
          PrivateIpAddresses:
            - PrivateIpAddress: "10.0.2.5"
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-subnet-2
  EC2InstanceSubnetThird:
    Type: AWS::EC2::Instance
    Condition: Has3AvailabilityZones
    Properties: 
      ImageId: "ami-0d7ed3ddb85b521a6"
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      # https://aws.amazon.com/premiumsupport/knowledge-center/network-throughput-benchmark-linux-ec2/
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-ping
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetThird
          PrivateIpAddresses:
            - PrivateIpAddress: "10.0.3.5"
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-subnet-3
  EC2InstanceSubnetFourth:
    Type: AWS::EC2::Instance
    Condition: Has4AvailabilityZones
    Properties: 
      ImageId: "ami-0d7ed3ddb85b521a6"
      InstanceType: !Ref EC2InstanceType
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      # https://aws.amazon.com/premiumsupport/knowledge-center/network-throughput-benchmark-linux-ec2/
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-ping
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetFourth
          PrivateIpAddresses:
            - PrivateIpAddress: "10.0.4.5"
              Primary: true
      Tags:
      - Key: Name
        Value: aws-ping-ec2-subnet-4

